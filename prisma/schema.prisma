generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Expert {
  id               Int           @id @default(autoincrement())
  fullName         String
  birthYear        Int?
  gender           String?
  academicTitle    String?       // Học hàm
  academicTitleYear Int?
  degree           String?       // Học vị
  degreeYear       Int?
  position         String?       // Chức vụ hiện tại
  currentWork      String?       // Công việc hiện nay
  organization     String?       // Đơn vị
  email            String?
  phone            String?
  deleted      Boolean   @default(false)

  // Quan hệ
  educations       Education[]
  workHistories    WorkHistory[]
  publications     Publication[]
  projects         Project[]
  languages        Language[]
}

model Education {
  id        Int     @id @default(autoincrement())
  year      Int
  school    String
  major     String
  expertId  Int
  expert    Expert  @relation(fields: [expertId], references: [id])
  deleted      Boolean   @default(false)
}

model WorkHistory {
  id         Int     @id @default(autoincrement())
  startYear  Int
  endYear    Int
  position   String
  workplace  String
  field      String
  expertId   Int
  expert     Expert  @relation(fields: [expertId], references: [id])
  deleted      Boolean   @default(false)
}

model Publication {
  id         Int     @id @default(autoincrement())
  year       Int
  place      String
  title      String
  type       String
  author     String
  expertId   Int
  expert     Expert  @relation(fields: [expertId], references: [id])
  deleted      Boolean   @default(false)
}

model Project {
  id         Int     @id @default(autoincrement())
  startYear  Int?
  endYear    Int?
  title      String
  status     String?
  role       String?
  expertId   Int
  expert     Expert  @relation(fields: [expertId], references: [id])
  deleted      Boolean   @default(false)
}

model Language {
  id         Int     @id @default(autoincrement())
  language   String
  listening  String
  speaking   String
  reading    String
  writing    String
  expertId   Int
  expert     Expert  @relation(fields: [expertId], references: [id])
  deleted      Boolean   @default(false)
}

/// Từ đây là các model dành cho NextAuth + Prisma Adapter
model User {
  id             String     @id @default(cuid())
  name           String?
  email          String?    @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  role           String     @default("admin") // ✅ thêm trường role
  accounts       Account[]
  sessions       Session[]
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refresh_token      String?  @map("refresh_token")
  access_token       String?  @map("access_token")
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @map("id_token")
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  entity    String
  entityId  Int
  detail    String?
  createdAt DateTime @default(now())
}

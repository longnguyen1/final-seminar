from typing import Any, Text, Dict, List
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet
import urllib.parse

# Import t·ª´ utils v√† normalizer
from .utils import (
    extract_entity,
    safe_api_call,
    get_expert_by_name,
    BASE_URL
)
from .data_normalizer import normalizer


def get_expert_projects(expert_id: int) -> List[Dict]:
    """L·∫•y danh s√°ch projects theo expert ID"""
    if not expert_id:
        return []
    
    url = f"{BASE_URL}/projects/by-expert-id?id={expert_id}"
    data = safe_api_call(url)
    
    if data and isinstance(data, list):
        return data
    return []


def format_project_count(projects: List[Dict], expert_name: str) -> str:
    """Format s·ªë l∆∞·ª£ng d·ª± √°n"""
    total = len(projects)
    return f"‚úÖ Chuy√™n gia {expert_name} ƒë√£/tham gia t·ªïng c·ªông {total} d·ª± √°n."


def format_project_list(projects: List[Dict], expert_name: str, start_index: int = 1, max_show: int = 20) -> str:
    """Format danh s√°ch d·ª± √°n"""
    if not projects:
        return f"Kh√¥ng t√¨m th·∫•y d·ª± √°n n√†o c·ªßa chuy√™n gia {expert_name}."
    
    # L·∫•y projects trong range c·∫ßn thi·∫øt
    end_index = start_index + max_show - 1
    selected_projects = projects[start_index-1:start_index-1+max_show]
    
    if not selected_projects:
        return "Kh√¥ng c√≤n d·ª± √°n n√†o n·ªØa."
    
    # S·∫Øp x·∫øp theo nƒÉm b·∫Øt ƒë·∫ßu (m·ªõi nh·∫•t tr∆∞·ªõc)
    sorted_projects = sorted(
        selected_projects,
        key=lambda x: x.get("startYear", 0),
        reverse=True
    )
    
    if start_index == 1:
        message = f"üìã Danh s√°ch d·ª± √°n c·ªßa {expert_name}:\n"
    else:
        message = f"üìå C√°c d·ª± √°n c√≤n l·∫°i c·ªßa {expert_name}:\n"
    
    for i, project in enumerate(sorted_projects, start_index):
        title = project.get('title', 'Kh√¥ng r√µ t√™n')
        start_year = project.get('startYear', '')
        end_year = project.get('endYear', '')
        status = project.get('status', '')
        role = project.get('role', '')
        
        message += f"{i}. {title}"
        
        # Th√™m th√¥ng tin chi ti·∫øt trong ngo·∫∑c
        details = []
        
        # Format time period
        if start_year or end_year:
            if start_year and end_year:
                details.append(f"{start_year}-{end_year}")
            elif start_year:
                details.append(f"{start_year}-Hi·ªán t·∫°i")
            elif end_year:
                details.append(f"ƒê·∫øn {end_year}")
        
        if status:
            details.append(f"Tr·∫°ng th√°i: {status}")
        if role:
            details.append(f"Vai tr√≤: {role}")
        
        if details:
            message += " (" + "; ".join(details) + ")"
        message += "\n"
    
    # Th√¥ng b√°o v·ªÅ s·ªë l∆∞·ª£ng c√≤n l·∫°i
    remaining = len(projects) - end_index
    if remaining > 0:
        message += f"\n(C√≤n {remaining} d·ª± √°n kh√°c. B·∫°n mu·ªën xem ti·∫øp kh√¥ng?)"
    
    return message


def get_projects_by_status(status: str) -> List[Dict]:
    """L·∫•y danh s√°ch projects theo tr·∫°ng th√°i"""
    if not status:
        return []
    
    # Normalize status
    normalized_status = normalizer.normalize_project_status(status)
    
    encoded_status = urllib.parse.quote(normalized_status)
    url = f"{BASE_URL}/projects/by-status?status={encoded_status}"
    data = safe_api_call(url)
    
    if data and isinstance(data, list):
        return data
    return []


def get_projects_by_year(year: int) -> List[Dict]:
    """L·∫•y danh s√°ch projects theo nƒÉm"""
    if not year:
        return []
    
    url = f"{BASE_URL}/projects/by-year?year={year}"
    data = safe_api_call(url)
    
    if data and isinstance(data, list):
        return data
    return []


def format_projects_by_criteria(projects: List[Dict], criteria: str, value: str) -> str:
    """Format danh s√°ch projects theo ti√™u ch√≠"""
    if not projects:
        return f"Kh√¥ng t√¨m th·∫•y d·ª± √°n n√†o {criteria} '{value}'."
    
    message = f"‚úÖ Danh s√°ch d·ª± √°n {criteria} '{value}':\n"
    
    # S·∫Øp x·∫øp theo nƒÉm b·∫Øt ƒë·∫ßu
    sorted_projects = sorted(projects, key=lambda x: x.get("startYear", 0), reverse=True)
    
    max_show = 15
    for i, project in enumerate(sorted_projects[:max_show], 1):
        title = project.get('title', 'Kh√¥ng r√µ')
        start_year = project.get('startYear', '')
        end_year = project.get('endYear', '')
        role = project.get('role', '')
        
        message += f"{i}. {title}"
        
        # Th√™m th√¥ng tin th·ªùi gian
        if start_year or end_year:
            if start_year and end_year:
                message += f" ({start_year}-{end_year})"
            elif start_year:
                message += f" ({start_year}-Hi·ªán t·∫°i)"
            elif end_year:
                message += f" (ƒê·∫øn {end_year})"
        
        # Th√™m role n·∫øu c√≥
        if role:
            message += f" - {role}"
        
        message += "\n"
    
    if len(sorted_projects) > max_show:
        message += f"... (C√≤n {len(sorted_projects) - max_show} d·ª± √°n kh√°c)"
    
    return message


class ActionThongKeDuAn(Action):
    def name(self) -> Text:
        return "action_thong_ke_du_an"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker, 
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        expert_name = extract_entity(tracker, "name")
        if not expert_name:
            # Fallback to slot values
            expert_id = tracker.get_slot("expert_id")
            expert_name = tracker.get_slot("expert_name") or tracker.get_slot("name")
            
            if not expert_id:
                dispatcher.utter_message(text="B·∫°n mu·ªën th·ªëng k√™ d·ª± √°n c·ªßa chuy√™n gia n√†o?")
                return []
        else:
            expert_id = None

        print(f"DEBUG: Counting projects for: {expert_name}")

        try:
            # L·∫•y th√¥ng tin expert n·∫øu ch∆∞a c√≥ ID
            if not expert_id:
                expert = get_expert_by_name(expert_name)
                if not expert:
                    dispatcher.utter_message(text=f"Kh√¥ng t√¨m th·∫•y chuy√™n gia c√≥ t√™n '{expert_name}'.")
                    return [SlotSet("expert_id", None), SlotSet("expert_name", None), SlotSet("name", None)]
                
                expert_id = expert.get("id")
                expert_name = expert.get("fullName", expert_name)

            if not expert_id:
                dispatcher.utter_message(text="Kh√¥ng th·ªÉ l·∫•y ID c·ªßa chuy√™n gia.")
                return [SlotSet("expert_id", None), SlotSet("expert_name", None), SlotSet("name", None)]

            # L·∫•y danh s√°ch projects
            projects = get_expert_projects(expert_id)
            
            # Format v√† g·ª≠i response
            message = format_project_count(projects, expert_name)
            dispatcher.utter_message(text=message)

            return [
                SlotSet("expert_id", expert_id), 
                SlotSet("expert_name", expert_name), 
                SlotSet("name", expert_name)
            ]

        except Exception as e:
            print(f"DEBUG: Exception in project count: {e}")
            dispatcher.utter_message(text="C√≥ l·ªói khi th·ªëng k√™ d·ª± √°n.")
            return [SlotSet("expert_id", None), SlotSet("expert_name", None), SlotSet("name", None)]


class ActionLietKeDuAn(Action):
    def name(self) -> Text:
        return "action_liet_ke_du_an"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker, 
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        expert_name = extract_entity(tracker, "name")
        if not expert_name:
            # Fallback to slot values
            expert_id = tracker.get_slot("expert_id")
            expert_name = tracker.get_slot("expert_name") or tracker.get_slot("name")
            
            if not expert_id:
                dispatcher.utter_message(text="B·∫°n mu·ªën li·ªát k√™ d·ª± √°n c·ªßa chuy√™n gia n√†o?")
                return []
        else:
            expert_id = None

        print(f"DEBUG: Listing projects for: {expert_name}")

        try:
            # L·∫•y th√¥ng tin expert n·∫øu ch∆∞a c√≥ ID
            if not expert_id:
                expert = get_expert_by_name(expert_name)
                if not expert:
                    dispatcher.utter_message(text=f"Kh√¥ng t√¨m th·∫•y chuy√™n gia c√≥ t√™n '{expert_name}'.")
                    return [SlotSet("expert_id", None), SlotSet("expert_name", None), SlotSet("name", None)]
                
                expert_id = expert.get("id")
                expert_name = expert.get("fullName", expert_name)

            if not expert_id:
                dispatcher.utter_message(text="Kh√¥ng th·ªÉ l·∫•y ID c·ªßa chuy√™n gia.")
                return [SlotSet("expert_id", None), SlotSet("expert_name", None), SlotSet("name", None)]

            # L·∫•y danh s√°ch projects
            projects = get_expert_projects(expert_id)
            
            if not projects:
                dispatcher.utter_message(text=f"Kh√¥ng t√¨m th·∫•y d·ª± √°n n√†o c·ªßa chuy√™n gia {expert_name}.")
                return [
                    SlotSet("expert_id", expert_id), 
                    SlotSet("expert_name", expert_name), 
                    SlotSet("name", expert_name)
                ]

            # Format v√† g·ª≠i response (20 d·ª± √°n ƒë·∫ßu ti√™n)
            message = format_project_list(projects, expert_name, start_index=1, max_show=20)
            dispatcher.utter_message(text=message)

            return [
                SlotSet("expert_id", expert_id), 
                SlotSet("expert_name", expert_name), 
                SlotSet("name", expert_name)
            ]

        except Exception as e:
            print(f"DEBUG: Exception in project listing: {e}")
            dispatcher.utter_message(text="C√≥ l·ªói khi li·ªát k√™ d·ª± √°n.")
            return [SlotSet("expert_id", None), SlotSet("expert_name", None), SlotSet("name", None)]


class ActionLietKeDuAnConLai(Action):
    def name(self) -> Text:
        return "action_liet_ke_du_an_con_lai"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker, 
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        expert_name = extract_entity(tracker, "name")
        expert_id = tracker.get_slot("expert_id")
        
        # Prioritize slot values for continuation
        if not expert_id and expert_name:
            expert = get_expert_by_name(expert_name)
            if expert:
                expert_id = expert.get("id")
                expert_name = expert.get("fullName", expert_name)

        if not expert_id:
            expert_name = tracker.get_slot("expert_name") or tracker.get_slot("name")
            if not expert_name:
                dispatcher.utter_message(text="Ch∆∞a r√µ chuy√™n gia n√†o c·∫ßn li·ªát k√™ d·ª± √°n.")
                return []

        print(f"DEBUG: Listing remaining projects for expert ID: {expert_id}")

        try:
            # L·∫•y danh s√°ch projects
            projects = get_expert_projects(expert_id)

            if len(projects) <= 20:
                dispatcher.utter_message(text="Kh√¥ng c√≤n d·ª± √°n n√†o n·ªØa.")
                return [
                    SlotSet("expert_id", expert_id), 
                    SlotSet("expert_name", expert_name), 
                    SlotSet("name", expert_name)
                ]

            # Format v√† g·ª≠i response (t·ª´ d·ª± √°n th·ª© 21 tr·ªü ƒëi)
            message = format_project_list(projects, expert_name, start_index=21, max_show=len(projects)-20)
            dispatcher.utter_message(text=message)

            return [
                SlotSet("expert_id", expert_id), 
                SlotSet("expert_name", expert_name), 
                SlotSet("name", expert_name)
            ]

        except Exception as e:
            print(f"DEBUG: Exception in remaining projects: {e}")
            dispatcher.utter_message(text="C√≥ l·ªói khi li·ªát k√™ d·ª± √°n c√≤n l·∫°i.")
            return [SlotSet("expert_id", None), SlotSet("expert_name", None), SlotSet("name", None)]


class ActionTraCuuDuAnTheoTrangThai(Action):
    def name(self) -> Text:
        return "action_tra_cuu_du_an_theo_trang_thai"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        
        status = extract_entity(tracker, "project_status") or extract_entity(tracker, "status")
        if not status:
            dispatcher.utter_message(text="B·∫°n mu·ªën tra c·ª©u d·ª± √°n c√≥ tr·∫°ng th√°i g√¨?")
            return []
        
        print(f"DEBUG: Searching projects by status: {status}")
        
        try:
            projects = get_projects_by_status(status)
            normalized_status = normalizer.normalize_project_status(status)
            message = format_projects_by_criteria(projects, "c√≥ tr·∫°ng th√°i", normalized_status)
            dispatcher.utter_message(text=message)
            
        except Exception as e:
            print(f"DEBUG: Exception in project status search: {e}")
            dispatcher.utter_message(text=f"C√≥ l·ªói khi tra c·ª©u d·ª± √°n theo tr·∫°ng th√°i: {e}")
        
        return [SlotSet("project_status", status), SlotSet("status", status)]


class ActionTraCuuDuAnTheoNam(Action):
    def name(self) -> Text:
        return "action_tra_cuu_du_an_theo_nam"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        
        year_str = extract_entity(tracker, "year")
        if not year_str:
            dispatcher.utter_message(text="B·∫°n mu·ªën tra c·ª©u d·ª± √°n nƒÉm n√†o?")
            return []
        
        try:
            year = int(year_str)
            print(f"DEBUG: Searching projects by year: {year}")
            
            projects = get_projects_by_year(year)
            message = format_projects_by_criteria(projects, "nƒÉm", str(year))
            dispatcher.utter_message(text=message)
            
        except ValueError:
            dispatcher.utter_message(text=f"'{year_str}' kh√¥ng ph·∫£i l√† nƒÉm h·ª£p l·ªá.")
        except Exception as e:
            print(f"DEBUG: Exception in project year search: {e}")
            dispatcher.utter_message(text=f"C√≥ l·ªói khi tra c·ª©u d·ª± √°n theo nƒÉm: {e}")
        
        return [SlotSet("year", year_str)]


class ActionTraCuuDuAnTheoVaiTro(Action):
    def name(self) -> Text:
        return "action_tra_cuu_du_an_theo_vai_tro"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        
        role = extract_entity(tracker, "project_role") or extract_entity(tracker, "role")
        if not role:
            dispatcher.utter_message(text="B·∫°n mu·ªën tra c·ª©u d·ª± √°n theo vai tr√≤ n√†o?")
            return []
        
        print(f"DEBUG: Searching projects by role: {role}")
        
        try:
            # Normalize role
            normalized_role = normalizer.normalize_project_role(role)
            
            encoded_role = urllib.parse.quote(normalized_role)
            url = f"{BASE_URL}/projects/by-role?role={encoded_role}"
            data = safe_api_call(url)
            
            if not data:
                dispatcher.utter_message(text=f"Kh√¥ng t√¨m th·∫•y d·ª± √°n n√†o c√≥ vai tr√≤ '{role}'.")
                return [SlotSet("project_role", role), SlotSet("role", role)]
            
            projects = data if isinstance(data, list) else data.get("projects", [])
            message = format_projects_by_criteria(projects, "c√≥ vai tr√≤", normalized_role)
            dispatcher.utter_message(text=message)
            
        except Exception as e:
            print(f"DEBUG: Exception in project role search: {e}")
            dispatcher.utter_message(text=f"C√≥ l·ªói khi tra c·ª©u d·ª± √°n theo vai tr√≤: {e}")
        
        return [SlotSet("project_role", role), SlotSet("role", role)]